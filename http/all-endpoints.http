### SimpleShop API - Complete Test Suite
### This file contains all API endpoints for comprehensive testing

//baseUrl = http://localhost:3000
//baseUrl = https://api.shop.506software.com
//@baseUrl = {{baseUrl}}
@baseUrl = http://localhost:3000
//@baseUrl = https://api.shop.506software.com

### ===========================================
### 1. HEALTH CHECK
### ===========================================

### Health Check
GET {{baseUrl}}/health

### ===========================================
### 2. AUTHENTICATION
### ===========================================

### Admin Login
# @name login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin123"
}

### Set token variable
@token = {{login.response.body.data.token}}

### ===========================================
### 3. PUBLIC PRODUCT ENDPOINTS
### ===========================================

### Get All Products (now includes images and primaryImage)
GET {{baseUrl}}/api/products

### Get Products with Pagination
GET {{baseUrl}}/api/products?page=1&limit=2

### Get Products with Search
GET {{baseUrl}}/api/products?search=Sample

### Get Products by Category
GET {{baseUrl}}/api/products?categoryId=1

### Get Product by ID (now includes images and primaryImage)
GET {{baseUrl}}/api/products/1

### Get Product Images (Public)
GET {{baseUrl}}/api/products/1/images

### ===========================================
### 4. ORDER CREATION
### ===========================================

### Create New Order
# @name createOrder
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "customerName": "Test Customer",
  "customerEmail": "test@example.com",
  "customerPhone": "+1234567890",
  "deliveryAddress": "123 Test Street, Test City, TC 12345",
  "items": [
    {
      "productId": 1,
      "quantity": 2
    },
    {
      "productId": 2,
      "quantity": 1
    }
  ]
}

### Set order ID for admin tests
@orderId = {{createOrder.response.body.data.id}}

### ===========================================
### 5. ADMIN ENDPOINTS (Protected)
### ===========================================

### Get All Orders (Admin)
GET {{baseUrl}}/api/admin/orders
Authorization: Bearer {{token}}

### Get Orders with Filters
GET {{baseUrl}}/api/admin/orders?status=new&page=1&limit=5
Authorization: Bearer {{token}}

### Get Specific Order
GET {{baseUrl}}/api/admin/orders/{{orderId}}
Authorization: Bearer {{token}}

### Update Order Status
PUT {{baseUrl}}/api/admin/orders/{{orderId}}/status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "status": "paid"
}

### Get Dashboard Statistics
GET {{baseUrl}}/api/admin/dashboard
Authorization: Bearer {{token}}

### Get All Products (Admin - now includes images and primaryImage)
GET {{baseUrl}}/api/admin/products
Authorization: Bearer {{token}}

### Get Product by ID (Admin - includes inactive/sold out)
GET {{baseUrl}}/api/admin/products/1
Authorization: Bearer {{token}}

### Create New Product (now includes categoryId and quantity)
# @name createProduct
POST {{baseUrl}}/api/admin/products
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "API Test Product with Images",
  "description": "Product created via API test with support for multiple images",
  "price": 25.99,
  "imageUrl": "https://via.placeholder.com/300x300?text=API+Test",
  "categoryId": 1,
  "quantity": 10
}

### Set product ID
@productId = {{createProduct.response.body.data.id}}

### Update Product (now includes categoryId and quantity)
PUT {{baseUrl}}/api/admin/products/{{productId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Updated API Test Product",
  "description": "Updated description",
  "price": 29.99,
  "categoryId": 1,
  "quantity": 15
}

### ===========================================
### PRODUCT IMAGES MANAGEMENT (Admin)
### ===========================================

### List Product Images (Admin)
GET {{baseUrl}}/api/admin/products/{{productId}}/images
Authorization: Bearer {{token}}

### Add First Image to Product
POST {{baseUrl}}/api/admin/products/{{productId}}/images
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "imageUrl": "https://picsum.photos/400/400?random=1",
  "altText": "Product front view",
  "sortOrder": 0,
  "isPrimary": true
}

### Add Second Image to Product
POST {{baseUrl}}/api/admin/products/{{productId}}/images
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "imageUrl": "https://picsum.photos/400/400?random=2",
  "altText": "Product side view",
  "sortOrder": 1,
  "isPrimary": false
}

### Add Third Image to Product
POST {{baseUrl}}/api/admin/products/{{productId}}/images
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "imageUrl": "https://picsum.photos/400/400?random=3",
  "altText": "Product back view",
  "sortOrder": 2,
  "isPrimary": false
}

### Reorder Images
PUT {{baseUrl}}/api/admin/products/{{productId}}/images/reorder
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "imageIds": [2, 1, 3]
}

### Update Image (Set as Primary)
PUT {{baseUrl}}/api/admin/products/{{productId}}/images/2
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "isPrimary": true
}

### Delete Product (Soft Delete)
DELETE {{baseUrl}}/api/admin/products/{{productId}}
Authorization: Bearer {{token}}

### ===========================================
### 6. ERROR TESTING
### ===========================================

### Invalid Login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "wrongpassword"
}

### Access Protected Endpoint Without Token
GET {{baseUrl}}/api/admin/orders

### Access Protected Endpoint With Invalid Token
GET {{baseUrl}}/api/admin/orders
Authorization: Bearer invalid_token

### Get Non-existent Product
GET {{baseUrl}}/api/products/999

### Get Non-existent Order
GET {{baseUrl}}/api/admin/orders/999
Authorization: Bearer {{token}}

### Create Order with Invalid Data
POST {{baseUrl}}/api/orders
Content-Type: application/json

{
  "customerName": "",
  "customerEmail": "invalid-email",
  "items": []
}

### Update Order with Invalid Status
PUT {{baseUrl}}/api/admin/orders/1/status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "status": "invalid_status"
}
