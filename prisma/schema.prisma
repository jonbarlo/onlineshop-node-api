generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([username])
  @@index([email])
  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.VarChar(255)
  slug        String   @unique @db.VarChar(50)
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products    Product[]

  @@index([isActive])
  @@index([slug])
  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  description String      @db.Text
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?     @map("image_url") @db.VarChar(255) // Deprecated - kept for backward compatibility
  categoryId  Int?        @map("category_id")
  quantity    Int         @default(0)
  colors      String      @default("[]") @db.Text
  sizes       String      @default("[]") @db.Text
  status      String      @default("available") @db.VarChar(20) // available, sold_out
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  images      ProductImage[]

  @@index([isActive])
  @@index([categoryId])
  @@index([status])
  @@map("products")
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  imageUrl    String   @map("image_url") @db.VarChar(500)
  altText     String?  @map("alt_text") @db.VarChar(255)
  sortOrder   Int      @default(0) @map("sort_order")
  isPrimary   Boolean  @default(false) @map("is_primary")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("product_images")
}

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique @map("order_number") @db.VarChar(20)
  customerName    String      @map("customer_name") @db.VarChar(100)
  customerEmail   String      @map("customer_email") @db.VarChar(100)
  customerPhone   String      @map("customer_phone") @db.VarChar(20)
  deliveryAddress String      @map("delivery_address") @db.Text
  status          String      @default("new") @db.VarChar(20)
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  items           OrderItem[]

  @@index([status])
  @@index([orderNumber])
  @@index([customerEmail])
  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int
  unitPrice Decimal  @map("unit_price") @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}
